// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FeatureFlagType {
  BOOLEAN
  PERCENTAGE
  CONFIG
}

enum Operator {
  EQUALS
  IN
  NOT_IN
  GREATER_THAN
  LESS_THAN
}

enum TargetingType {
  ATTRIBUTE  // targeting po atrybutach użytkownika
  GROUP      // targeting po grupach użytkowników
}

model FeatureFlag {
  id               String             @id @default(uuid())
  key              String             @unique
  description      String?
  type             FeatureFlagType
  isEnabled        Boolean?           // tylko dla BOOLEAN
  rolloutPercentage Int?              // tylko dla PERCENTAGE
  configJson       Json?              // tylko dla CONFIG
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  targetingRules   TargetingRule[]
  evaluations      FlagEvaluationLog[]
  changes          FlagChangeHistory[]
}

model TargetingRule {
  id           String        @id @default(uuid())
  flagId       String
  targetingType TargetingType
  
  // Targeting po atrybutach użytkownika (gdy targetingType = ATTRIBUTE)
  attribute    String?
  operator     Operator?
  value        Json?
  
  // Targeting po grupach użytkowników (gdy targetingType = GROUP)
  groupId      String?
  
  flag         FeatureFlag @relation(fields: [flagId], references: [id], onDelete: Cascade)
  group        UserGroup?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model FlagEvaluationLog {
  id        String     @id @default(uuid())
  flagId    String
  userId    String?
  requestId String?
  result    Json
  createdAt DateTime   @default(now())
  
  flag      FeatureFlag @relation(fields: [flagId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model FlagChangeHistory {
  id        String     @id @default(uuid())
  flagId    String
  changedBy String
  oldValue  Json
  newValue  Json
  createdAt DateTime   @default(now())
  flag      FeatureFlag @relation(fields: [flagId], references: [id], onDelete: Cascade)
}

model User {
  id          String    @id @default(uuid())
  externalId  String?   @unique // ID z zewnętrznego systemu auth
  email       String?   @unique
  password    String    // hasło użytkownika
  name        String?
  attributes  Json?     // dodatkowe atrybuty użytkownika (country, plan, etc.)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  groupMemberships UserGroupMembership[]
  evaluations      FlagEvaluationLog[]
}

model UserGroup {
  id          String    @id @default(uuid())
  key         String    @unique // np. "testers", "premium_users", "beta_users"
  name        String    // np. "Testerzy", "Użytkownicy Premium"
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  memberships   UserGroupMembership[]
  targetingRules TargetingRule[]
}

model UserGroupMembership {
  id        String    @id @default(uuid())
  userId    String
  groupId   String
  createdAt DateTime  @default(now())

  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId]) // użytkownik może być w grupie tylko raz
}