// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FeatureFlagType {
  BOOLEAN
  PERCENTAGE
  CONFIG
}

enum Operator {
  EQUALS
  IN
  NOT_IN
  GREATER_THAN
  LESS_THAN
}

model FeatureFlag {
  id               String             @id @default(uuid())
  key              String             @unique
  description      String?
  type             FeatureFlagType
  isEnabled        Boolean?           // tylko dla BOOLEAN
  rolloutPercentage Int?              // tylko dla PERCENTAGE
  configJson       Json?              // tylko dla CONFIG
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  targetingRules   TargetingRule[]
  evaluations      FlagEvaluationLog[]
  changes          FlagChangeHistory[]
}

model TargetingRule {
  id        String     @id @default(uuid())
  flagId    String
  attribute String
  operator  Operator
  value     Json
  flag      FeatureFlag @relation(fields: [flagId], references: [id], onDelete: Cascade)
}

model FlagEvaluationLog {
  id        String     @id @default(uuid())
  flagId    String
  userId    String?
  requestId String?
  result    Json
  createdAt DateTime   @default(now())
  flag      FeatureFlag @relation(fields: [flagId], references: [id], onDelete: Cascade)
}

model FlagChangeHistory {
  id        String     @id @default(uuid())
  flagId    String
  changedBy String
  oldValue  Json
  newValue  Json
  createdAt DateTime   @default(now())
  flag      FeatureFlag @relation(fields: [flagId], references: [id], onDelete: Cascade)
}